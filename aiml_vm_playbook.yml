---
- name: playbook for proxmox hipervisior and VM for AM/ML Edge Platform
  hosts: pvehost12
#  user: ubuntu
#  become: yes
#  connection: ssh
#  debuger: on_failed
#  gather_facs: yes
  tasks:
   - name: Change GRUB config
     ansible.builtin.lineinfile:
       path: "/etc/default/grub"
       regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
       line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on efifb=off"'
   - name: Update GRUB
     ansible.builtin.command: update-grub
   - name: Get GRUB config
     ansible.builtin.shell: cat /etc/default/grub
     register: grub
   - name: Print the grub output
     ansible.builtin.debug:
       msg: "{{ grub }}"
   - name: Remove a line
     ansible.builtin.lineinfile:
       path: "/etc/modprobe.d/pve-blacklist.conf"
       search_string: "{{item.driver}}"
       line: "{{item.driver}}"
     with_items:
       - driver: "blacklist nvidia"
       - driver: "blacklist nouveau"
       - driver: "blacklist radeon"
       - driver: "blacklist nvidiafb"
   - name: get blacklist.conf to variable
     ansible.builtin.command: cat /etc/modprobe.d/pve-blacklist.conf
     register: blacklist
   - name: Print blacklist.conf
     ansible.builtin.debug:
       msg: "{{blacklist}}"
   - name: Update initramfs
     ansible.builtin.command: update-initramfs -u
   - name: Add Virtual Function IO (vfio) kernel modules to load at boot time
     ansible.builtin.lineinfile:
       path: "/etc/modules"
       search_string: "{{item.vfunction}}"
       line: "{{item.vfunction}}"
     with_items:
       - vfunction: "vfio"
       - vfunction: "vfio_iommu_type1"
       - vfunction: "vfio_pci"
       - vfunction: "vfio_virqfd"
#     ansible.builtin.command: echo {{ item.variable }} >> /etc/modules
   - name: Get modules
     ansible.builtin.shell: cat /etc/modules
     register: modules
   - name: Print the modules output
     ansible.builtin.debug:
       msg: "{{ modules }}"
   - name: Get GeForce RTX address and IDs
     ansible.builtin.shell: lspci -n -s 01:00 | awk 'BEGIN { ORS=", " }; {print $3}'
     register: lspci_output
   - name: Print lspci_output
     ansible.builtin.debug:
       msg: "{{lspci_output}}"
   - name: Create vfio.conf file only when it does not exists
     copy:
       content: ""
       dest: /etc/modprobe.d/vfio.conf
       force: false
       group: sys
       owner: root
       mode: 0555
   - name: Assign the GeForce RTX to the Virtual Function IO (vfio)
     ansible.builtin.lineinfile:
       path: "/etc/modprobe.d/vfio.conf"
       search_string: "{{item.ids}}"
       line: "{{item.ids}}"
 #    ansible.builtin.command: echo "options vfio-pci ids={{item.ids}}" > /etc/modprobe.d/vfio.conf
     with_items:
       - ids: "{{lspci_output.stdout_lines}}"
   - name: Create iommu_unsafe_interrupts.conf.conf file only when it does not exists
     copy:
       content: ""
       dest: /etc/modprobe.d/iommu_unsafe_interrupts.conf
       force: false
       group: sys
       owner: root
       mode: 0555
   - name: enable IOMMU interrupt remapping
     ansible.builtin.lineinfile:
       path: "/etc/modprobe.d/iommu_unsafe_interrupts.conf"
       search_string: "{{item.variable}}"
       line: "{{item.variable}}"
#     ansible.builtin.command: echo "options vfio_iommu_type1 allow_unsafe_interrupts=1" > /etc/modprobe.d/iommu_unsafe_interrupts.conf
     with_items:
       - variable: "options vfio_iommu_type1 allow_unsafe_interrupts=1"
   - name: Reboot
     ansible.builtin.reboot:
